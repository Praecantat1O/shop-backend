service: product-service

frameworkVersion: '3'

plugins:
  - serverless-webpack

package:
  individually: true

provider:
  name: aws
  runtime: nodejs16.x
  stage: development
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Query"
            - "dynamodb:Scan"
            - "dynamodb:BatchGetItem"
            - "dynamodb:BatchWriteItem"
          Resource:
            - "arn:aws:dynamodb:${ssm:/system/api/REGION}:448342942052:table/${ssm:/system/api/DATA_DDB_PRODUCTS_TABLE_NAME}"
            - "arn:aws:dynamodb:${ssm:/system/api/REGION}:448342942052:table/${ssm:/system/api/DATA_DDB_STOCKS_TABLE_NAME}"

resources:
  Resources:
    products:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${ssm:/system/api/DATA_DDB_PRODUCTS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    stocks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${ssm:/system/api/DATA_DDB_STOCKS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: "product_id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "product_id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  getProductsList:
    handler: src/functions/getProductsList.handler
    events:
      - http:
          path: /products
          method: get
          cors: true
  getProductsById:
    handler: src/functions/getProductsById.handler
    events:
      - http:
          path: /products/{id}
          method: get
          cors: true
