service: product-service

frameworkVersion: '3'

plugins:
  - serverless-webpack

package:
  individually: true

provider:
  name: aws
  runtime: nodejs18.x
  stage: development
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:DescribeTable"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Query"
            - "dynamodb:Scan"
            - "dynamodb:BatchGetItem"
            - "dynamodb:BatchWriteItem"
            - "ssm:GetParameter"
          Resource:
            - "*"
        - Effect: "Allow"
          Action:
            - sqs:*
          Resource:
            Fn::GetAtt: [ProductsSQSQueue, Arn]
        - Effect: Allow
          Action: sns:*
          Resource: "*"

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${ssm:/system/api/DATA_DDB_PRODUCTS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    StocksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${ssm:/system/api/DATA_DDB_STOCKS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: "product_id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "product_id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ProductsSQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ProductsSQSQueue
    CreateProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: 'Product topic'
        TopicName: createProductTopic
    CreateProductTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: {"Ref": "CreateProductTopic"}
        Endpoint: "Stanislau_Ukolau@epam.com"
        Protocol: "email"

functions:
  getProductsList:
    handler: src/functions/getProductsList.getProductsList
    events:
      - http:
          path: /products
          method: get
          cors: true
  getProductsById:
    handler: src/functions/getProductsById.getProductsById
    events:
      - http:
          path: /products/{id}
          method: get
          cors: true
  createProduct:
    handler: src/functions/createProduct.createProduct
    events:
      - http:
          path: /products
          method: post
          cors: true
  catalogBatchProcess:
    handler: src/functions/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt: [ProductsSQSQueue, Arn]
